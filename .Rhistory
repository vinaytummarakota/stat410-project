summary(quad_r)
linear_r
summary(linear_r)
summary(quad_r)
summary(cube_r)
summary(quart_r)
summary(linear_s)
summary(quad_s)
summary(cube_s)
summary(quart_s)
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="Sosa Home Runs")
abline(linear_s, col='red')
lines(x_s, predict(quad_s), col='green')
lines(x_s, predict(cube_s), col='blue')
lines(x_s, predict(quart_s), col='purple')
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="Sosa Home Runs")
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", title="# of Home Runs vs Player Age (Sammy Sosa)")
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", title="# of Home Runs vs Player Age (Sammy Sosa)")
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
abline(linear_s, col='red')
lines(x_s, predict(quad_s), col='green')
lines(x_s, predict(cube_s), col='blue')
lines(x_s, predict(quart_s), col='purple')
legend(1, 1, c("Linear", "Quadratic", "Cubic", "Quartic"))
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
abline(linear_s, col='red')
lines(x_s, predict(quad_s), col='green')
lines(x_s, predict(cube_s), col='blue')
lines(x_s, predict(quart_s), col='purple')
legend(1, 1, c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'))
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
abline(linear_s, col='red')
lines(x_s, predict(quad_s), col='green')
lines(x_s, predict(cube_s), col='blue')
lines(x_s, predict(quart_s), col='purple')
legend('bottomleft', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'))
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
abline(linear_s, col='red')
lines(x_s, predict(quad_s), col='green')
lines(x_s, predict(cube_s), col='blue')
lines(x_s, predict(quart_s), col='purple')
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'))
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'), pt.cex=2)
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'),
cex=1.5)
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'))
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
abline(linear_s, col='red')
lines(x_s, predict(quad_s), col='green')
lines(x_s, predict(cube_s), col='blue')
lines(x_s, predict(quart_s), col='purple')
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'))
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'),
pch=c('.','.','.','.'))
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'),
pch=c('.....','.','.','.'))
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'),
pch=c('-','.','.','.'))
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'),
pch=c('-','-','-','-'))
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'),
pch=c('-','-','-','-'), pt.cex=2)
plot(x=x_r, y=y_r, xlab="Ruth Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Babe Ruth)")
abline(linear_r, col='red')
lines(x_r, predict(quad_r), col='green')
lines(x_r, predict(cube_r), col='blue')
lines(x_r, predict(quart_r), col='purple')
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'),
pch=c('-','-','-','-'), pt.cex=2)
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
abline(linear_s, col='red')
lines(x_s, predict(quad_s), col='green')
lines(x_s, predict(cube_s), col='blue')
lines(x_s, predict(quart_s), col='purple')
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'),
pch=c('-','-','-','-'), pt.cex=2)
plot(x=x_r, y=y_r, xlab="Ruth Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Babe Ruth)")
abline(linear_r, col='red')
lines(x_r, predict(quad_r), col='green')
lines(x_r, predict(cube_r), col='blue')
lines(x_r, predict(quart_r), col='purple')
legend('topright', legend=c("Linear", "Quadratic", "Cubic", "Quartic"), col=c('red', 'green', 'blue', 'purple'),
pch=c('-','-','-','-'), pt.cex=2)
which.max(y_s)
x_s[10]
x_r[which.max(y_r)]
confint(cube_s, level=0.95)
confint(cube_s, level=0.95)[1]
confint(cube_s, level=0.95)[2]
confint(cube_s, level=0.95)[5
]
coefs_s <- confint(cube_s, level=0.95)
xmax_s <- x_s[which.max(y_s)]
lower_s <- coefs_s[1]+coefs_s[2]*xmax_s+coefs_s[3]*xmax_s^2+coefs_s[4]*xmax_s^3
upper_s <- coefs_s[5]+coefs_s[6]*xmax_s+coefs_s[7]*xmax_s^2+coefs_s[8]*xmax_s^3
lower_s
upper_s
?confint
xmax_s
predict(cube_s, newdata=data.frame(x=x_s[which.max(y_s)]), interval="confidence", level=0.95)
predict(cube_s, newdata=data.frame(x=x_s[which.max(y_s)]), interval="prediction", level=0.95)
predict(cube_s, newdata=data.frame(x_s=x_s[which.max(y_s)]), interval="prediction", level=0.95)
ci_s <- predict(cube_s, newdata=data.frame(x_s=x_s[which.max(y_s)]), interval="confidence", level=0.95)
pi_s <- predict(cube_s, newdata=data.frame(x_s=x_s[which.max(y_s)]), interval="prediction", level=0.95)
ci_r <- predict(quad_r, newdata=data.frame(x_r=x_r[which.max(y_r)]), interval="confidence", level=0.95)
pi_r <- predict(quad_r, newdata=data.frame(x_r=x_r[which.max(y_r)]), interval="prediction", level=0.95)
ci_s
pi_s
ci_r
pi_r
x_s[which.max(x_s)]
x_r[which.max(x_r)]
x_s[which.max(y_s)]
x_r[which.max(y_r)]
kappa_s = 29
x_kap_s <- (x-kappa_s)*I(x > kappa_s)
stick_s <- lm(y_s ~ x_s+x_kap_s)
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
lines(x_s, predict(stick_s), col='blue')
kappa_s = 29
x_kap_s <- (x_s-kappa_s)*I(x_s > kappa_s)
stick_s <- lm(y_s ~ x_s+x_kap_s)
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
lines(x_s, predict(stick_s), col='blue')
kappa_r = 32
x_kap_r <- (x_r-kappa_r)*I(x_r > kappa_r)
stick_r <- lm(y_r ~ x_r+x_kap_r)
plot(x=x_r, y=y_r, xlab="Ruth Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Babe Ruth)")
lines(x_s, predict(stick_r), col='blue')
kappa_r = 32
x_kap_r <- (x_r-kappa_r)*I(x_r > kappa_r)
stick_r <- lm(y_r ~ x_r+x_kap_r)
plot(x=x_r, y=y_r, xlab="Ruth Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Babe Ruth)")
lines(x_r, predict(stick_r), col='blue')
summary(stick_s)
summary(stick_r)
plot(x=x_s, y=y_s, xlab="Sosa Age (Years)", ylab="# of Home Runs", main="# of Home Runs vs Player Age (Sammy Sosa)")
lines(x_s, predict(stick_s), col='blue')
predict(stick_s)
predict(stick_r)
install.packages('mgcv')
data(trees)
trees
mlr <- lm(volume ~ height + girth, data=trees)
mlr <- lm(Volume ~ Height + Girth, data=trees)
summary(mlr)
gam <- gam(volume ~ s(Height)+s(Girth), data=trees)
library('mgcv')
gam <- gam(volume ~ s(Height)+s(Girth), data=trees)
gam <- gam(Volume ~ s(Height)+s(Girth), data=trees)
summary(gam)
plot(fit, shade=TRUE)
plot(gam, shade=TRUE)
?summary.gam
plot(gam, shade=TRUE)
setwd('C:/Users/Srivinay Tummarakota/Documents/Vinay\'s Docs/Rice Sophomore/STAT 410/Final Project/')
data <- read.csv('cleaned_data.csv', header=TRUE)
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 7)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_blk <- c('Bachelor', 'Poverty', 'Black', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_blk <- as.vector(apply(beta_b, 2, mean))
conf_blk <- as.vector(apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975))))
conf_blk
length(beta_blk)
length(conf_blk)
coef(fit)
conf_blk <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975)))
conf_blk
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 7)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_sdi <- c('Bachelor', 'Poverty', 'SimpsonsDI', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_sdi <- as.vector(apply(beta_b, 2, mean))
conf_sdi <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975)))
x_sdi <- as.matrix(cbind(rep(1, n), data[covariates_sdi]))
y_hat_sdi <- x_sdi%*%beta_sdi # calculate fitted values
res_sdi <- data$Pct5Plus - y_hat_sdi # calculate residuals
sdres_sdi <- scale(res_sdi) # calculate standardized residuals
coef(fit)
conf_sdi
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 7)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_blk <- c('Bachelor', 'Poverty', 'Black', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_blk <- as.vector(apply(beta_b, 2, mean))
conf_blk <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975)))
x_blk <- as.matrix(cbind(rep(1, n), data[covariates_blk]))
y_hat_blk <- x_blk%*%beta_blk # calculate fitted values
res_blk <- data$Pct5Plus - y_hat_blk # calculate residuals
sdres_blk <- scale(res_blk) # calculate standardized residuals
conf_blk
coef(fit)
plot(x=y_hat_blk, y=res_blk, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_blk) # Normality Plot
qqline(sdres_blk)
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 8)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_pov <- c('Bachelor', 'Poverty', 'Black', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_pov <- as.vector(apply(beta_b, 2, mean))
conf_pov <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975)))
x_pov <- as.matrix(cbind(rep(1, n), data[covariates_pov], data['Black']*data['Poverty']))
y_hat_pov <- x_pov%*%beta_pov # calculate fitted values
res_pov <- data$Pct5Plus - y_hat_pov # calculate residuals
sdres_pov <- scale(res_pov) # calculate standardized residuals
conf_pov
coef(fit)
logsdi_fit <- lm(log(Pct5Plus+1) ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(logsdi_fit)
plot(logsdi_fit)
logblk_fit <- lm(log(Pct5Plus+1) ~ Bachelor+Poverty+Black+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(logblk_fit)
logpov_fit <- lm(log(Pct5Plus+1) ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data)
plot(logblk_fit)
logpov_fit <- lm(log(Pct5Plus+1) ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(logpov_fit)
plot(sdi_fit)
# Model 1 (Simpson's DI)
sdi_fit <- lm(Pct5Plus ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data)
plot(sdi_fit)
plot(racepov_fit)
racepov_fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data)
plot(racepov_fit)
plot(racepov_fit)
plot(x=y_hat_sdi, y=res_sdi) # Residuals vs Fitted Values
plot(x=y_hat_sdi, y=res_sdi, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_sdi) # Normality Plot
qqline(sdres_sdi)
plot(x=y_hat_pov, y=res_pov, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_pov) # Normality Plot
qqline(sdres_pov)
plot(logsdi_fit)
plot(logpov_fit)
# Model 1 (Simpson's DI)
sdi_fit <- lm(Pct5Plus ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(sdi_fit)
plot(sdi_fit)
summary(pctblack_fit)
plot(pctblack_fit)
# Model 3 (Race-Poverty Interaction)
racepov_fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(racepov_fit)
plot(racepov_fit)
beta_b = matrix(0, nrow = B, ncol = 7)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_sdi <- c('Bachelor', 'Poverty', 'SimpsonsDI', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_sdi <- as.vector(apply(beta_b, 2, mean)) # calculate coefficients
conf_sdi <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975))) # calculate CI's
x_sdi <- as.matrix(cbind(rep(1, n), data[covariates_sdi])) # subset data
y_hat_sdi <- x_sdi%*%beta_sdi # calculate fitted values
res_sdi <- data$Pct5Plus - y_hat_sdi # calculate residuals
sdres_sdi <- scale(res_sdi) # calculate standardized residuals
plot(x=y_hat_sdi, y=res_sdi, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_sdi) # Normality Plot
qqline(sdres_sdi)
# Model 5 (Bootstrapped % Black)
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 7)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_blk <- c('Bachelor', 'Poverty', 'Black', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_blk <- as.vector(apply(beta_b, 2, mean)) # calculate coefficients
conf_blk <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975))) # calculate CI's
x_blk <- as.matrix(cbind(rep(1, n), data[covariates_blk])) # subset data
y_hat_blk <- x_blk%*%beta_blk # calculate fitted values
res_blk <- data$Pct5Plus - y_hat_blk # calculate residuals
sdres_blk <- scale(res_blk) # calculate standardized residuals
plot(x=y_hat_blk, y=res_blk, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_blk) # Normality Plot
qqline(sdres_blk)
# Model 6 (Bootstrapped Race-Poverty Interaction)
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 8)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_pov <- c('Bachelor', 'Poverty', 'Black', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_pov <- as.vector(apply(beta_b, 2, mean)) # calculate coefficients
conf_pov <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975))) # calculate CI's
x_pov <- as.matrix(cbind(rep(1, n), data[covariates_pov], data['Black']*data['Poverty'])) # subset data
y_hat_pov <- x_pov%*%beta_pov # calculate fitted values
res_pov <- data$Pct5Plus - y_hat_pov # calculate residuals
sdres_pov <- scale(res_pov) # calculate standardized residuals
plot(x=y_hat_pov, y=res_pov, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_pov) # Normality Plot
qqline(sdres_pov)
# Model 7 (Log-Transformed Simpson's DI)
logsdi_fit <- lm(log(Pct5Plus+1) ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(logsdi_fit)
plot(logsdi_fit)
summary(logblk_fit)
plot(logblk_fit)
summary(logpov_fit)
plot(logpov_fit)
setwd('C:/Users/Srivinay Tummarakota/Documents/Vinay\'s Docs/Rice Sophomore/STAT 410/Final Project/')
data <- read.csv('cleaned_data.csv', header=TRUE)
# Model 1 (Simpson's DI)
sdi_fit <- lm(Pct5Plus ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(sdi_fit)
plot(sdi_fit)
summary(pctblack_fit)
plot(pctblack_fit)
# Model 3 (Race-Poverty Interaction)
racepov_fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(racepov_fit)
plot(racepov_fit)
beta_b = matrix(0, nrow = B, ncol = 7)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_sdi <- c('Bachelor', 'Poverty', 'SimpsonsDI', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_sdi <- as.vector(apply(beta_b, 2, mean)) # calculate coefficients
conf_sdi <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975))) # calculate CI's
x_sdi <- as.matrix(cbind(rep(1, n), data[covariates_sdi])) # subset data
y_hat_sdi <- x_sdi%*%beta_sdi # calculate fitted values
res_sdi <- data$Pct5Plus - y_hat_sdi # calculate residuals
sdres_sdi <- scale(res_sdi) # calculate standardized residuals
plot(x=y_hat_sdi, y=res_sdi, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_sdi) # Normality Plot
qqline(sdres_sdi)
# Model 5 (Bootstrapped % Black)
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 7)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_blk <- c('Bachelor', 'Poverty', 'Black', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_blk <- as.vector(apply(beta_b, 2, mean)) # calculate coefficients
conf_blk <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975))) # calculate CI's
x_blk <- as.matrix(cbind(rep(1, n), data[covariates_blk])) # subset data
y_hat_blk <- x_blk%*%beta_blk # calculate fitted values
res_blk <- data$Pct5Plus - y_hat_blk # calculate residuals
sdres_blk <- scale(res_blk) # calculate standardized residuals
plot(x=y_hat_blk, y=res_blk, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_blk) # Normality Plot
qqline(sdres_blk)
# Model 6 (Bootstrapped Race-Poverty Interaction)
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 8)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_pov <- c('Bachelor', 'Poverty', 'Black', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_pov <- as.vector(apply(beta_b, 2, mean)) # calculate coefficients
conf_pov <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975))) # calculate CI's
x_pov <- as.matrix(cbind(rep(1, n), data[covariates_pov], data['Black']*data['Poverty'])) # subset data
y_hat_pov <- x_pov%*%beta_pov # calculate fitted values
res_pov <- data$Pct5Plus - y_hat_pov # calculate residuals
sdres_pov <- scale(res_pov) # calculate standardized residuals
plot(x=y_hat_pov, y=res_pov, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_pov) # Normality Plot
qqline(sdres_pov)
# Model 7 (Log-Transformed Simpson's DI)
logsdi_fit <- lm(log(Pct5Plus+1) ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(logsdi_fit)
plot(logsdi_fit)
summary(logblk_fit)
plot(logblk_fit)
# Model 9 (Log-Transformed Race-Poverty Interaction)
logpov_fit <- lm(log(Pct5Plus+1) ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(logpov_fit)
plot(logpov_fit)
setwd('C:/Users/Srivinay Tummarakota/Documents/Vinay\'s Docs/Rice Sophomore/STAT 410/Final Project/')
data <- read.csv('cleaned_data.csv', header=TRUE)
# Model 1 (Simpson's DI)
sdi_fit <- lm(Pct5Plus ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(sdi_fit)
setwd('C:/Users/Srivinay Tummarakota/Documents/Vinay\'s Docs/Rice Sophomore/STAT 410/Final Project/')
data <- read.csv('cleaned_data.csv', header=TRUE)
# Model 1 (Simpson's DI)
sdi_fit <- lm(Pct5Plus ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(sdi_fit)
plot(sdi_fit)
pctblack_fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(pctblack_fit)
plot(pctblack_fit)
racepov_fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(racepov_fit)
plot(racepov_fit)
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 7)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_sdi <- c('Bachelor', 'Poverty', 'SimpsonsDI', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_sdi <- as.vector(apply(beta_b, 2, mean)) # calculate coefficients
conf_sdi <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975))) # calculate CI's
x_sdi <- as.matrix(cbind(rep(1, n), data[covariates_sdi])) # subset data
y_hat_sdi <- x_sdi%*%beta_sdi # calculate fitted values
res_sdi <- data$Pct5Plus - y_hat_sdi # calculate residuals
sdres_sdi <- scale(res_sdi) # calculate standardized residuals
plot(x=y_hat_sdi, y=res_sdi, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_sdi) # Normality Plot
qqline(sdres_sdi)
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 7)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_blk <- c('Bachelor', 'Poverty', 'Black', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_blk <- as.vector(apply(beta_b, 2, mean)) # calculate coefficients
conf_blk <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975))) # calculate CI's
x_blk <- as.matrix(cbind(rep(1, n), data[covariates_blk])) # subset data
y_hat_blk <- x_blk%*%beta_blk # calculate fitted values
res_blk <- data$Pct5Plus - y_hat_blk # calculate residuals
sdres_blk <- scale(res_blk) # calculate standardized residuals
plot(x=y_hat_blk, y=res_blk, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_blk) # Normality Plot
qqline(sdres_blk)
B = 1000 # Number of resamples
beta_b = matrix(0, nrow = B, ncol = 8)
n = length(data$Pct5Plus)
for(b in 1:B){
# Resample the data:
boot = sample(1:n, n, replace = TRUE)
data_b = data[boot, ]
fit <- lm(Pct5Plus ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data_b)
beta_b[b, ] = coef(fit)
}
covariates_pov <- c('Bachelor', 'Poverty', 'Black', 'VacantHousing', 'OwnerOccupied', 'OldHousing')
beta_pov <- as.vector(apply(beta_b, 2, mean)) # calculate coefficients
conf_pov <- apply(beta_b, 2, function(x) quantile(x, c(0.025, 0.975))) # calculate CI's
x_pov <- as.matrix(cbind(rep(1, n), data[covariates_pov], data['Black']*data['Poverty'])) # subset data
y_hat_pov <- x_pov%*%beta_pov # calculate fitted values
res_pov <- data$Pct5Plus - y_hat_pov # calculate residuals
sdres_pov <- scale(res_pov) # calculate standardized residuals
plot(x=y_hat_pov, y=res_pov, xlab="Fitted Values", ylab="Residuals") # Residuals vs Fitted Values
qqnorm(sdres_pov) # Normality Plot
qqline(sdres_pov)
logsdi_fit <- lm(log(Pct5Plus+1) ~ Bachelor+Poverty+SimpsonsDI+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(logsdi_fit)
plot(logsdi_fit)
logblk_fit <- lm(log(Pct5Plus+1) ~ Bachelor+Poverty+Black+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(logblk_fit)
plot(logblk_fit)
logpov_fit <- lm(log(Pct5Plus+1) ~ Bachelor+Poverty+Black+Black*Poverty+VacantHousing+OwnerOccupied+OldHousing, data=data)
summary(logpov_fit)
plot(logpov_fit)
